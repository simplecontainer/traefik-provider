name: Traefik provider CI/CD

on:
  push:
    branches-ignore:
      - main
    paths-ignore:
      - 'README.md'
      - 'scripts/**'
      - 'LICENSE'
      - '.github/resources/**'
      - '.gitignore'
      - '.github/**'
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to release'
        required: true
        default: 'all'
        type: choice
        options:
          - traefik-provider

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22.x' ]
        os: [ 'linux' ]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_USER_PAT }}
          show-progress: false
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Test code
        run: go test -tags=unit ./...

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22.x' ]
        platform: [ 'amd64', 'arm64' ]
        os: [ 'linux' ]
        component: ['traefik-provider']
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_USER_PAT }}
          show-progress: false
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Display Go version
        run: go version
      - name: Bump versions
        run: |
          VERSION=$(cat version)
          
          VERSION=$(.github/scripts/version.sh "VERSION" "${{ github.event.head_commit.message }}")
          
          echo "$VERSION" > version.tmp
          
          mv version.tmp version
      - name: Build ${{ matrix.component }} for ${{ matrix.os }} on ${{ matrix.platform }}
        if: matrix.component == 'traefik-provider' || github.event_name != 'workflow_dispatch'
        run: |
          VERSION=$(cat version)
          CGO_ENABLED=0 GOOS=${{ matrix.os }} GOARCH=${{ matrix.platform }} go build -ldflags "-s -w -X main.version=$VERSION" -o ${{matrix.component}}-${{ matrix.os }}-${{ matrix.platform }}
          chmod +x ${{ matrix.component }}-${{ matrix.os }}-${{ matrix.platform }}
      - name: Upload traefik-provider artifacts
        if: matrix.component == 'traefik-provider' || github.event_name != 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-${{ matrix.os}}-${{ matrix.platform }}
          path: ${{ matrix.component }}/${{ matrix.component }}-${{ matrix.os }}-${{ matrix.platform }}

  prepare-release:
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [build]
    outputs:
      tag: ${{ steps.generate_tag.outputs.tag }}
      matrix: ${{ steps.generate_tag.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_USER_PAT }}
          show-progress: false

      - name: Generate tag name for workflow dispatch
        id: generate_tag
        run: |
          COMPONENT="${{ github.event.inputs.component }}"
          
          VERSION=$(cat version)
          VERSION=$(.github/scripts/version.sh "$VERSION" "${{ github.event.head_commit.message }}")

          TAG="${VERSION}"

          echo "Generated tags: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          MATRIX=$(printf '[{"tag": "%s", "component":"traefik-provider"}]' "$TAG")

          echo "$MATRIX" | jq -c
          echo "matrix=$(echo "$MATRIX" | jq -c)" >> $GITHUB_OUTPUT

  release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [ prepare-release ]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_USER_PAT }}
          show-progress: false

      - name: Parse matrix and run sequentially
        run: |
          matrix=$(echo '${{ needs.prepare-release.outputs.matrix }}' | jq -c '.[]')
          
          for item in $matrix; do
            COMPONENT=$(echo $item | jq -r '.component')
            TAG=$(echo $item | jq -r '.tag')
          
            echo "Processing $COMPONENT with tag $TAG"
          
            VERSION=$(cat version)
            VERSION=$(.github/scripts/version.sh "$VERSION" "${{ github.event.head_commit.message }}")
            echo "$VERSION" > version
          
            git config user.name "actions"
            git config user.email "actions-user@github.com"
            git add version
            git commit -m "Automated version tracking for $TAG" || echo "No changes to commit"
            git pull
            git tag "$TAG"
            git push origin main --tags
          done